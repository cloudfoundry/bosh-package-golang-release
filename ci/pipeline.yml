---
jobs:
- name: bump
  serial: true
  plan:
  - in_parallel:
    - get: golang-1.23
      trigger: true
    - get: golang-1.22
      trigger: true
    - get: golang-release
    - get: stemcell
    - get: semver
      params:
        bump: minor
    - get: bosh-cli-image
    - get: bosh-warden-cpi-image
    - get: bosh-shared-ci
  - task: bump
    file: golang-release/ci/tasks/bump.yml
    image: bosh-cli-image
    params:
      PRIVATE_YML: |
        ---
        blobstore:
          provider: gcs
          options:
            credentials_source: static
            json_key: '((cloud-foundry-gcp-credentials))'
  - task: test
    file: golang-release/ci/tasks/test.yml
    privileged: true
    image: bosh-warden-cpi-image
  - task: finalize
    file: bosh-shared-ci/tasks/release/create-final-release.yml
    input_mapping:
      release_repo: golang-release
      version: semver
    params:
      GIT_USER_NAME: CI Bot
      GIT_USER_EMAIL: bots@cloudfoundry.org
      PRIVATE_YML: |
        ---
        blobstore:
          provider: gcs
          options:
            credentials_source: static
            json_key: '((cloud-foundry-gcp-credentials))'
  - in_parallel:
    - put: semver
      params:
        file: semver/version
    - put: golang-release
      params:
        rebase: true
        repository: release_repo
        tag: release_metadata/tag-name

- name: build-docker-image
  plan:
  - get: golang-release
    trigger: true
  - put: golang-release-image
    params:
      build: "golang-release"
      dockerfile: "golang-release/ci/docker/golang-release/Dockerfile"
    get_params:
      skip_download: true
  - put: golang-release-security-scanner-image
    params:
      build: "golang-release"
      dockerfile: "golang-release/ci/docker/golang-release-security-scanner/Dockerfile"
    get_params:
      skip_download: true


resources:
- name: bosh-shared-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-shared-ci.git
    private_key: ((github_deploy_key_bosh-shared-ci.private_key))
- name: golang-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-package-golang-release.git
    branch: main
    private_key: ((github_deploy_key_golang-release.private_key))

- name: golang-release-image
  type: docker-image
  source:
    repository: bosh/golang-release
    username: ((docker.username))
    password: ((docker.password))

- name: golang-release-security-scanner-image
  type: docker-image
  source:
    repository: bosh/golang-release-security-scanner
    username: ((docker.username))
    password: ((docker.password))

- name: bosh-cli-image
  type: registry-image
  source:
    repository: bosh/cli
    username: ((docker.username))
    password: ((docker.password))

- name: bosh-warden-cpi-image
  type: registry-image
  source:
    repository: bosh/warden-cpi
    username: ((docker.username))
    password: ((docker.password))

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-jammy-go_agent

- name: semver
  type: semver
  source:
    bucket: bosh-packages-golang-release
    driver: gcs
    key: version
    initial_version: 0.8.0
    json_key: ((cloud-foundry-gcp-credentials))

- name: golang-1.22
  type: dynamic-metalink
  source:
    #NOTE: The 'include=all' parameter to this server is documented here: <https://pkg.go.dev/golang.org/x/website/internal/dl>,
    #      which was found via: <https://github.com/golang/go/issues/34864>. The devs on the project seem to believe that this is
    #      an implementation detail and could be subject to change at any time. So beware.
    #
    #      Anyway. Because 1.22.x is an "archived" Go minor version, we must use the 'include=all' flag to get information about it.
    #      This has the unfortunate side-effect of including "unstable" releases, but given that 1.22.x is no longer supported, it is
    #      _probably_ okay to assume that we won't get unstable or testing releases of 1.22.x.
    #      Because version_check is picky, we also have to filter out unstable and testing releases, as they're not specified in a 
    #      semver-compatible way. They seem to be specified with the "beta" and "rc" keywords, respectively, so we perform the required
    #      jq gyrations below. The metalink_get machinery seems to be fine with ignoring the "beta" and "rc" entries, so we don't duplicate
    #      that filtering there.
    version: 1.22.x
    version_check: |
      curl -s 'https://go.dev/dl/?mode=json&include=all' | \
        jq -r '.[].version[2:] | select((contains("rc") or contains("beta")) | not)'
    metalink_get: |
      curl -s 'https://go.dev/dl/?mode=json&include=all' | jq '
        map(select(.version[2:] == env.version)) | map({
          "files": (.files | map({
            "name": .filename,
            "size": .size,
            "urls": [ { "url": "https://dl.google.com/go/\(.filename)" } ],
            "hashes": [ { "type": "sha-256", "hash": .sha256 } ] } ) ) } )[]'
    include_files:
    - go*.linux-amd64.tar.gz
    - go*.windows-amd64.zip
    - go*.darwin-amd64.tar.gz

- name: golang-1.23
  type: dynamic-metalink
  source:
    version: 1.23.x
    version_check: |
      curl -s https://go.dev/dl/?mode=json | jq -r '.[].version[2:]'
    metalink_get: |
      curl -s https://go.dev/dl/?mode=json | jq '
        map(select(.version[2:] == env.version)) | map({
          "files": (.files | map({
            "name": .filename,
            "size": .size,
            "urls": [ { "url": "https://dl.google.com/go/\(.filename)" } ],
            "hashes": [ { "type": "sha-256", "hash": .sha256 } ] } ) ) } )[]'
    include_files:
    - go*.linux-amd64.tar.gz
    - go*.windows-amd64.zip
    - go*.darwin-amd64.tar.gz

resource_types:
- name: dynamic-metalink
  type: docker-image
  source:
    repository: dpb587/dynamic-metalink-resource

- name: semver
  type: docker-image
  source:
    repository: concourse/semver-resource
    tag: 1.6
